


*****VERSION WITH A MAP ON THE UI***** 

In this version there is a google map api used on the homepage.

The user can click anywhere on the map

An api call will return the latitude and longitude for wherever they
clicked.

These coordinates will be passed into the weather api

The weather api returns a snow forecast

The snow amount is passed into the light api

The light changes color, brightness, and effect.



*****VERSION WITH NOTIFICATIONS*****

The user can select a resort and a snow level to receive notifications about.

If the snow level forecasted for that resort reaches the threshold specified,
a notification will be sent to the user informing them that the resort is 
forecasted to get that snow level.  

The user's light will also be set to a color, brightness, and effect 
corresponding to the notification.



*****VERSION WITH ALARM*****

The user can select a time to 'wake up'

When this time comes, the app calls the weather api and checks how much 
snow was received OVERNIGHT
    - This version requires an API that can give us historical data or 
        a server that can check the weather throughout the night and store
        how much snow was received each time the api was called

The light is then passed the snow level data to change to a certain color

A notification is sent to the user informing them how much snow was received.



******POSSIBLE FEATURES******

- Buttons next to each resort to add to favorites once a user is logged in.
- Adding an alarm function
- Moving database to a node server
- Adding ability for the user to be notified anytime a resort is forecasts for 
    a chosen weather parameter.
- Moving to darkSky API and historical data (this will rework most of the app)
- Add a modal with inputs for adding a resort and address

    - Use API to convert address to lat and longitude
    - Use API to find timezone based on latitude and longitude

    - To add a place to the database.
        - User enters a resort name and address.
            - Address is parased by a function to convert it to http format
            - Address is passed in to openCageData url
            - Request is made to openCageData
                - Response contains latitude and longitude for resort and timezone
                - The resort name as a key and an object of lat, long, and timezone 
                    is added to firebase favorites for that user.  
                - The new resort is added to that user's favorites list